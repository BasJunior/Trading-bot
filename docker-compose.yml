version: '3.8'

services:
  deriv-telegram-bot:
    build: .
    container_name: deriv-telegram-bot
    restart: unless-stopped
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - DERIV_APP_ID=${DERIV_APP_ID}
      - DERIV_API_TOKEN=${DERIV_API_TOKEN}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_MT5=${ENABLE_MT5:-false}
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('https://api.telegram.org')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: deriv-bot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    command: redis-server --appendonly yes

  # Optional: PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: deriv-bot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=deriv_bot
      - POSTGRES_USER=botuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - bot-network
    ports:
      - "5432:5432"

  # Optional: Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: deriv-bot-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - bot-network

  grafana:
    image: grafana/grafana:latest
    container_name: deriv-bot-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - bot-network

networks:
  bot-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:
